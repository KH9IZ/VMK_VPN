.. _grade_project:

Семестровый проект
==================

Вступление
----------
Наш проект изначально подразумевался как коммерческий, 
поэтому было принято решение писать код в приватном репозитории, с последующим открытием его, 
для защиты. Но оказалось, что при открытии теряются связи с fork'ами. Поэтому у репозитория всего 
один форк (мой).


Семестровый проект — это *публичный* git-репозиторий с кодом на Python3,

#. в котором есть более одного участника, [В проекте принимало участие 3 человека]
   
   * я могу посмотреть статистику участия 

     * по количество коммитов 
       Тут тоже проблема, было принято решение после каждого принятого pull request'а делать squash всех коммитов,
       дабы не засорять `историю <https://github.com/Chauss-LLC/VMK_VPN/commits/develop>`_, 
       Если нужно просмотреть все коммиты, можно глядеть в `каждый pull request отдельно <https://github.com/Chauss-LLC/VMK_VPN/pull/11>`_
      
     * `по объёму кода <https://github.com/Chauss-LLC/VMK_VPN/blame/develop/main.py>`_

   * В котором принята и соблюдается некоторая единая `дисциплина оформления коммитов <https://github.com/Chauss-LLC/VMK_VPN/tree/develop#дисциплина-оформления-коммитов>`_
#. в котором ``pylint``, а также ``pydocstyle`` не находят ошибок [Продемонстрировать]

   * некоторые требования анализаторов *можно* запрещать в config-файле
     Все запреты уместились в `Makefile <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/Makefile#L19>`_, хотя там уже достаочно конфигураций, чтобы вынести это в отдельный файл.
   * вспомогательные функции и классы, подразумевающие повторное использование, `должны быть аннотированы <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/wg.py#L129>`_. [Пример фцнкции-интерфейса реализованной одним программистом для другого с аннотациями.]
   * наличие `docstrings обязательно <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/main.py#L29>`_.

#. в котором есть `немножко тестов <https://github.com/Chauss-LLC/VMK_VPN/blob/develop/tests/tests.py>`_

   * должны быть покрыты модульными тестами в первую очередь функции и классы, не использующие интерактивные возможности (т. е не GUI, не сетевое взаимодействие и т. п.)
   * таких функций/классов должно быть не менее 5

#. в котором есть `немножко документации <https://45.142.215.232/docs/>`_

   * описание проекта в `README <https://github.com/Chauss-LLC/VMK_VPN/blob/develop/README.md>`_ и `постановка задачи на GH <https://github.com/FrBrGeorge/PythonDevelopment2022/issues/10>`_ [Из-за пивота в конце весны пришлось изменить постановку задачи]
     
     * В случае GUI — проект интерфейса [Не знаю считается ли наш интерфейс GUI, но его проект `есть <https://user-images.githubusercontent.com/22713174/174499031-cfe9e47f-24b3-4bcd-96b3-a9c7347d1861.png>`_]
       
   * программной `sphinx <https://45.142.215.232/docs/>`_
   * пользовательской [В качестве пользовательской документации, на мой взгляд, можно считать секцию с частыми вопросами в боте и инструкция по настройке VPN в ней]

#. в котором есть немножко локализации [Бот поддерживает 2 языка и мгновенное переключение между ними. Соответственно каждый пользователь видит интерфейс на выбраном языке]

   * с использованием `babel <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/Makefile#L30>`_
   * обратите внимание на то, что, например, -`.mo` файлы надо сгенерировать и положить в дистрибутив вашего проекта 

#. в котором есть немножко автоматизации сборки / деплоймента.
       [Здесь всё сложно есть `страшные костыли и велосипеды <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/Makefile#L7>`_, есть тщетные попытки `"сделать красиво" <https://github.com/Chauss-LLC/VMK_VPN/blob/810f15a012c34e46e983a2b831595b268b5aac19/Makefile#L15>`_, но из-за "сервисной" специфики проекта многие рассмотренные на лекциях технологии не применимы. Можно подискутировать на тему докеров, колёс для развертывания системы на большем кличестве серверов, использование github actions для тригера на обновления, на тему того, как деплой должен происходить, что делать с sudo командами и так далее. Жалкие попытки всего этого были, но привели в тупик, от куда потом еле выезли на хоть как-то работающую версию]

   * в частности, в репозитории не хранятся никакие генераты (в том числе дистрибутивные) [тут все гладко, ничего не хранится]
   * каждый дистрибутивный генерат (переводы, документация, иное) должны побираться одной командой средства автоматизации [есть]
   * Если вы делаете приложение или модуль, он должен быть оформлен в виде `wheel`, который можно установить в произвольном окружении (например, на моём компьютере) [тут мимо]

Немножко — это реально немножко, чтобы я видел, что работа проделана. Например, если вы задумали какое-то приложение из реал лайфа, и в нём довольно много логики, обмазать ''всю'' её тестами будет долго. Но пяток должен быть.

Методика проверки:
 #. показать сборку, выгонку техдокументации, запуск тестов
 #. показать документацию
 #. сформировать дистрибутив
 #. задеплоить в чистое окружение
 #. показать работу и перевод
Оценка:
 * По сумме баллов каждого из пунктов требований. То есть набрать 5 баллов из 6, что, с учётом претензий по каждому из пунктов, не так уж просто)
 * В случае *значимо* неравномерного участия в проекте водится КТУ — есть шанс получить оценку меньше, чем товарищи
